-- 02create_ecfps.sql

drop table if exists ECFPS_CFG_TBL cascade;
CREATE TABLE ECFPS_CFG_TBL (
	KE varchar(255) NOT NULL,
	VAL varchar(255) NOT NULL,
	LAST_UPDATE_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	CONSTRAINT PK_ECFPS_CFG PRIMARY KEY (KE)
);

create function trg_func_cfg_tbl() returns trigger as
$$
begin
	new.LAST_UPDATE_DATETIME = now();
	return new;
END
$$ language 'plpgsql';

create or replace trigger TRG_CFG_TBL 
before insert or update of val on ECFPS_CFG_TBL
for each row execute procedure TRG_FUNC_CFG_TBL();


drop table if exists ECFPS_CUS_CFG_TBL cascade;
CREATE TABLE ECFPS_CUS_CFG_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	KE varchar(255) NOT NULL,
	VAL varchar(255) NOT NULL,
	CAT varchar(255) NULL,
	TAGS varchar(255) NULL,
	SEQ int DEFAULT NULL NULL,
	KE_DESC varchar(140) DEFAULT NULL NULL,
	VAL_DESC varchar(140) DEFAULT NULL NULL,
	CAT_DESC varchar(140) DEFAULT NULL NULL,
	STATUS char(1) NULL,
	CREATION_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	LAST_UPDATE_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	CONSTRAINT PK_ECFPS_CUS_CFG PRIMARY KEY (ID)
);

INSERT INTO ecfps_cus_cfg_tbl (ke, val, cat, status) 
VALUES ('CAS_API_KEY', 'cas-api-key', 'BCS_API_KEY', 'A');

INSERT INTO ecfps_cus_cfg_tbl (ke, val, cat, status) 
VALUES ('FAST_API_KEY', 'fast-api-key', 'BCS_API_KEY', 'A');

INSERT INTO ecfps_cus_cfg_tbl (ke, val, cat, status) 
VALUES ('BANK_CAS_API_KEY', 'bank-cas-api-key', 'BCS_API_KEY', 'A');

INSERT INTO ecfps_cus_cfg_tbl (ke, val, cat, status) 
VALUES ('BANK_FAST_API_KEY', 'bank-fast-api-key', 'BCS_API_KEY', 'A');



-- 03admin.sql
drop table if exists ECFPS_PARTICIPANT_TBL cascade;
CREATE TABLE ECFPS_PARTICIPANT_TBL (
	AGENT_BIC varchar(11) NOT NULL,
	AGENT_NAME varchar(255) NOT NULL,
	CCY char(3) DEFAULT 'SGD' NOT NULL,
	SIGN_ON_STATUS smallint NOT NULL,
	AVAILABILITY smallint NOT NULL,
	DEFAULT_STATUS smallint default 0 NOT NULL,
	EVENT_DATETIME timestamp(3) NOT NULL,
	IS_ACTIVE boolean NOT NULL,
	ADD_DAT jsonb NULL,
	LAST_UPDATE_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	CREATION_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	CONSTRAINT PK_PARTICIPANT PRIMARY KEY (AGENT_BIC)
);

-- Index for common queries
CREATE INDEX IDX_PARTICIPANT_ACTIVE ON ECFPS_PARTICIPANT_TBL (IS_ACTIVE ASC);
CREATE INDEX IDX_PARTICIPANT_NAME ON ECFPS_PARTICIPANT_TBL (AGENT_NAME ASC);


-- Updated INSERT statements for new ECFPS_PARTICIPANT_TBL structure with lowercase column names
INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('BKCHSGSGXXX', 'Bank of China (Singapore) Limited', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('CIBBSGSGXXX', 'CIMB Bank Berhad Singapore Branch', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('CITISGSGXXX', 'Citibank Singapore Limited', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('DBSSSGSGXXX', 'DBS Bank Ltd', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('HBAPSGSGXXX', 'The Hongkong and Shanghai Banking Corporation Limited', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('ICBKSGSGXXX', 'Industrial and Commercial Bank of China Limited Singapore Branch', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('MBBMSGSGXXX', 'Malayan Banking Berhad Singapore Branch', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('OCBCSGSGXXX', 'Oversea-Chinese Banking Corporation Limited', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('SCBLSGSGXXX', 'Standard Chartered Bank (Singapore) Limited', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('UOVBSGSGXXX', 'United Overseas Bank Limited', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('LIGPSGSGXXX', 'Liquid Group Pte. Ltd.', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

INSERT INTO "public"."ecfps_participant_tbl" ("agent_bic", "agent_name", "ccy", "sign_on_status", "availability", "event_datetime", "is_active", "add_dat", "last_update_datetime", "creation_datetime") VALUES 
('XFEPSGSGXXX', 'Xfers Pte. Ltd.', 'SGD', 0, 0, '2025-06-09 13:25:08.994', true, NULL, '2025-06-09 13:25:08.994', '2025-06-09 13:25:08.994');

-- 04addressing.sql
drop table if exists ECFPS_ADR_UPD_HIST_TBL cascade;
CREATE TABLE ECFPS_ADR_UPD_HIST_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	CLIENT_REQ_ID varchar(35) NOT NULL,
	REQ_NTF_ACTION char(4) NOT NULL,
	SUB_TYPE char(4) NULL,
	REGISTRATION_ID varchar(35) NULL,
	AGENT char(11) NOT NULL,
	PROXY_ID varchar(140) NULL,
	PROXY_ID_TYPE varchar(10) NULL,
	ACCOUNT_NO varchar(200) NULL, -- Increased for encryption
	ACCOUNT_TYPE char(4) NULL,
	ACCOUNT_NAME varchar(500) NULL, -- Increased for encryption
	CURRENCY char(3) DEFAULT 'SGD' NULL,
	DISPLAY_NAME varchar(500) NULL, -- Increased for encryption
	ACCOUNT_HOLDER_TYPE varchar(4) NULL,
	ORGANISATION_NAME varchar(700) NULL, -- Increased for encryption
	ORGANISATION_REGISTRATION_DATE date NULL,
	ORGANISATION_TYPE char(4) NULL,
	INDIVIDUAL_GIVEN_NAME varchar(200) NULL, -- Increased for encryption
	INDIVIDUAL_MIDDLE_NAME varchar(200) NULL, -- Increased for encryption
	INDIVIDUAL_LAST_NAME varchar(200) NULL, -- Increased for encryption
	IS_PRE_AUTHORISED boolean NULL,
	IS_XB_OPT_OUT boolean NULL,
	PROXY_REGISTRATION_STATUS char(4) NULL,
	STATE smallint NULL,
	STATUS_UPDATE_DATETIME timestamp(3) NULL,
	IS_ACCEPTED boolean NULL,
	REJECT_REASON char(8) NULL,
	CLIENT_SYS_ID varchar(35) NOT NULL,
	CLIENT_USR_ID varchar(35) NULL,
	CREATION_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	LAST_UPDATE_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	ADD_DAT jsonb NULL,
	CONSTRAINT PK_ADR_UPD_HIST PRIMARY KEY (ID)
);
CREATE INDEX IDX_ADR_UPD_HIST_CLIENT_REQ_ID ON ECFPS_ADR_UPD_HIST_TBL (CLIENT_REQ_ID ASC);
CREATE INDEX IDX_ADR_UPD_HIST_PROXY_ID ON ECFPS_ADR_UPD_HIST_TBL (PROXY_ID ASC);
CREATE INDEX IDX_ADR_UPD_HIST_REGISTRATION_ID ON ECFPS_ADR_UPD_HIST_TBL (REGISTRATION_ID ASC);

drop table if exists ECFPS_ADR_PROXY_TBL cascade;
CREATE TABLE ECFPS_ADR_PROXY_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	REGISTRATION_ID varchar(35) NOT NULL,
	AGENT char(11) NOT NULL,
	PROXY_ID varchar(140) NOT NULL,
	PROXY_ID_TYPE varchar(10) NOT NULL,
	DISPLAY_NAME varchar(500) NULL, -- Increased for encryption
	ACCOUNT_NO varchar(200) NOT NULL, -- Increased for encryption
	ACCOUNT_TYPE char(4) NOT NULL,
	ACCOUNT_NAME varchar(500) NULL, -- Increased for encryption
	CURRENCY char(3) DEFAULT 'SGD' NOT NULL,
	ACCOUNT_HOLDER_TYPE char(4) NULL,
	ORGANISATION_NAME varchar(700) NULL, -- Increased for encryption
	ORGANISATION_REGISTRATION_DATE date NULL,
	ORGANISATION_TYPE char(4) NULL,
	INDIVIDUAL_GIVEN_NAME varchar(200) NULL, -- Increased for encryption
	INDIVIDUAL_MIDDLE_NAME varchar(200) NULL, -- Increased for encryption
	INDIVIDUAL_LAST_NAME varchar(200) NULL, -- Increased for encryption
	IS_PRE_AUTHORISED boolean NOT NULL,
	IS_XB_OPT_OUT boolean NULL,
	REGISTRATION_STATUS char(4) NOT NULL,
	PROXY_STATUS char(4) NULL,
	ACCOUNT_STATUS char(4) NULL,
	REGISTRATION_DATETIME timestamp(3) NULL,
	CREATION_USER varchar(35) NOT NULL,
	CREATION_DATETIME timestamp(3) NOT NULL,
	LAST_UPDATE_USER varchar(35) NOT NULL,
	LAST_UPDATE_DATETIME timestamp(3) NOT NULL,
	CUSTOM_1 varchar(40) NULL,
	CUSTOM_2 varchar(40) NULL,
	CONSTRAINT PK_ADR_PROXY PRIMARY KEY (ID)
);
-- CREATE INDEX IDX_ADR_PROXY_AGENT ON ECFPS_ADR_PROXY_TBL (AGENT ASC);
CREATE INDEX IDX_ADR_PROXY_PROXY_ID ON ECFPS_ADR_PROXY_TBL (PROXY_ID ASC);
CREATE INDEX IDX_ADR_PROXY_REGISTRATION_ID ON ECFPS_ADR_PROXY_TBL (REGISTRATION_ID ASC);

drop table if exists ECFPS_ADR_ENQ_HIST_TBL cascade;
CREATE TABLE ECFPS_ADR_ENQ_HIST_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	IS_ACCEPTED boolean NULL,
	AGENT char(11) NULL,
	PROXY_ID varchar(140) NULL,
	PROXY_ID_TYPE varchar(10) NULL,
	PROXY_REQUESTOR_TYPE char(4) NULL,
	PROXY_REQUESTOR_VALUE varchar(140) NULL,
	DISPLAY_NAME varchar(500) NULL, -- Increased for encryption
	ACCOUNT_NO varchar(200) NULL, -- Increased for encryption
	ACCOUNT_TYPE char(4) NULL,
	ACCOUNT_NAME varchar(500) NULL, -- Increased for encryption
	IS_PRE_AUTHORISED boolean NULL,
	IS_XB_OPT_OUT boolean NULL,
	REGISTRATION_ID varchar(35) NULL,
	PROXY_STATUS char(4) NULL,
	ENQUIRY_REFERENCE varchar(35) NULL,
	REJECT_REASON char(8) NULL,
	CREATION_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	CONSTRAINT PK_ADR_ENQ_HIST PRIMARY KEY (ID)
);
-- CREATE INDEX IDX_ADR_ENQ_HIST_CLIENT_REQ_ID ON ECFPS_ADR_ENQ_HIST_TBL (CLIENT_REQ_ID ASC);
CREATE INDEX IDX_ADR_ENQ_HIST_PROXY_ID ON ECFPS_ADR_ENQ_HIST_TBL (PROXY_ID ASC);
CREATE INDEX IDX_ADR_ENQ_HIST_CREATION_DATETIME ON ECFPS_ADR_ENQ_HIST_TBL (CREATION_DATETIME ASC);

-- 05payment.sql
drop table if exists ECFPS_PAYMENT_TBL cascade;
CREATE TABLE ECFPS_PAYMENT_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	TRANSACTION_ID varchar(35) NOT NULL,
	FPS_REF_NO varchar(35) NULL,
	ORIGINAL_FPS_REF_NO varchar(35) NULL,
	INSTRUCTION_ID varchar(35) NOT NULL,
	END_TO_END_ID varchar(35) NULL,
	-- [Reserved fields
	ACCT_VRF_OPTION varchar(15) NULL,
	CATEGORY_PURPOSE char(6) NULL, -- Inward may be null
	-- Reserved fields]
	IS_CREDIT boolean NOT NULL,
	SETTLEMENT_AMT decimal(17,2) NOT NULL,
	SETTLEMENT_CCY char(3) NOT NULL,
	SETTLEMENT_DATE date NULL,
	-- [Reserved fields
	INSTRUCTED_AMT decimal(17,2) NULL,
	INSTRUCTED_CCY char(3) NULL,
	CHARGE_AMT decimal(17,2) NULL,
	CHARGE_CCY char(3) NULL,
	CHARGE_AGENT char(3) NULL,
	CHARGE_AGENT_BIC varchar(11) NULL,
	-- Reserved fields]
	MANDATE_ID varchar(35) NULL,
	DEBTOR_NAME varchar(500) NULL, -- Increased for encryption
	-- [Reserved fields
	IS_DEBTOR_CORP boolean NULL,
	DEBTOR_BIC varchar(11) NULL,
	-- Reserved fields]
	DEBTOR_CUST_ID varchar(35) NULL,
	-- [Reserved fields
	DEBTOR_CONTACT_MOBILE varchar(35) NULL,
	DEBTOR_CONTACT_EMAIL varchar(254) NULL,
	-- Reserved fields]
	DEBTOR_AGENT char(11) NOT NULL,
	-- [Reserved fields
	DEBTOR_AGENT_BIC varchar(11) NULL,
	-- Reserved fields]
	DEBTOR_ACCT_ID varchar(400) NOT NULL, -- Increased for encryption
	DEBTOR_ACCT_ID_TYPE char(4) NOT NULL,
	CREDITOR_NAME varchar(500) NULL, -- Increased for encryption
	-- [Reserved fields
	IS_CREDITOR_CORP boolean NULL,
	CREDITOR_BIC varchar(11) NULL,
	-- Reserved fields]
	CREDITOR_CUST_ID varchar(35) NULL,
	-- [Reserved fields
	CREDITOR_CONTACT_MOBILE varchar(35) NULL,
	CREDITOR_CONTACT_EMAIL varchar(254) NULL,
	-- Reserved fields]
	CREDITOR_AGENT char(11) NOT NULL,
	-- [Reserved fields
	CREDITOR_AGENT_BIC varchar(11) NULL,
	-- Reserved fields]
	CREDITOR_ACCT_ID varchar(400) NOT NULL, -- Increased for encryption
	CREDITOR_ACCT_ID_TYPE char(4) NOT NULL,
	PURPOSE char(4) NOT NULL,
	-- [Reserved fields
	PURPOSE_INFO varchar(35) NULL,
	-- Reserved fields]
	REMITTANCE_INFO varchar(140) NULL,
	-- [Reserved fields
	RETURN_REASON char(4) NULL,
	RETURN_REASON_INFO_1 varchar(105) NULL,
	RETURN_REASON_INFO_2 varchar(105) NULL,
	-- Reserved fields]
	TRANSACTION_STATUS char(4) NOT NULL,
	SETTLEMENT_DATETIME timestamp(3) NULL,
	ACCEPTANCE_DATETIME timestamp(3) NULL,
	STATUS_REASON varchar(8) NULL,
	STATUS_REASON_INFO_1 varchar(105) NULL,
	STATUS_REASON_INFO_2 varchar(105) NULL,
	STATUS_REASON_INFO_3 varchar(105) NULL,
	ACCT_VRF_STATUS smallint NULL,
	ACCT_VRF_VAL smallint NULL,
	BAL_STATUS smallint NOT NULL,
	BAL_STATUS_LAST_UPDATE_DATETIME timestamp(3) NULL,
	BAL_REF varchar(35) NULL,
	CLR_CD char(11) NOT NULL,
	TRG_ACCT_NO_TYPE char(4) NULL,
	TRG_ACCT_BRANCH varchar(3) NULL,
	TRG_ACCT_NO varchar(400) NULL,
	CHRG_REF varchar(35) NULL,
	CUSTOMER_CHRG_AMT decimal(17,2) NULL,
	CHRG_RULE_ID int NULL,
	TYP char(1) NOT NULL,
	-- [Reserved fields
	BUSINESS_SERVICE char(6) NOT NULL,
	-- Reserved fields]
	IS_OUTWARD boolean NOT NULL,
	CLIENT_SYS_ID varchar(35) NOT NULL,
	CLIENT_REQ_ID varchar(35) NOT NULL,
	CLIENT_USR_ID varchar(35) NULL,
	-- [Reserved fields
	IS_RR_REQUESTED boolean NULL,
	-- Reserved fields]
	IS_ONUS boolean NOT NULL,
	-- [Reserved fields
	IS_REC_RT boolean NULL,
	IS_RT_OUT boolean NULL,
	-- Reserved fields]
	EX_TYPE smallint NOT NULL,
	EX_MSG varchar(254) NULL,
	EX_HDL_STS smallint NOT NULL,
	CREATION_DATETIME timestamp(3) NOT NULL,
	LAST_UPDATE_DATETIME timestamp(3) NOT NULL,
	ADD_DAT jsonb NULL,
	CUST_1 varchar(40) NULL,
	CUST_2 varchar(40) NULL,
	CUST_3 varchar(250) NULL,
	CUST_4 varchar(40) NULL,
	CUST_5 varchar(40) NULL,
	CUST_6 varchar(40) NULL,
	CUST_7 varchar(40) NULL,
	CUST_8 varchar(40) NULL,
	CUST_9 varchar(40) NULL,
    -- Constraints must include partition key for partitioned tables
    CONSTRAINT PK_PAYMENT PRIMARY KEY (ID, CREATION_DATETIME),
    CONSTRAINT UN_PAYMENT UNIQUE (CLIENT_REQ_ID, CREATION_DATETIME)
) PARTITION BY RANGE (CREATION_DATETIME);

--  CREATE INDEX IDX_PAYMENT_CATEGORY_PURPOSE_PURPOSE_INFO ON ECFPS_PAYMENT_TBL (  CATEGORY_PURPOSE ASC  , PURPOSE_INFO ASC  )   ;
 CREATE INDEX IDX_PAYMENT_END_TO_END_ID ON ECFPS_PAYMENT_TBL (  END_TO_END_ID ASC  )   ;
 CREATE INDEX IDX_PAYMENT_EX_HDL_BAL_TX_STS ON ECFPS_PAYMENT_TBL (  EX_HDL_STS ASC  , BAL_STATUS ASC  , TRANSACTION_STATUS ASC  )   ;
 CREATE INDEX IDX_PAYMENT_FPS_REF_NO ON ECFPS_PAYMENT_TBL (  FPS_REF_NO ASC  )   ;
 CREATE INDEX IDX_PAYMENT_ISOUTWARD_CREATION_DATETIME ON ECFPS_PAYMENT_TBL (  IS_OUTWARD ASC  , CREATION_DATETIME ASC  )   ;
 CREATE INDEX IDX_PAYMENT_LAST_UPDATE_DATETIME ON ECFPS_PAYMENT_TBL (  LAST_UPDATE_DATETIME ASC  )   ;
 CREATE INDEX IDX_PAYMENT_ORIGINAL_FPS_REF_NO ON ECFPS_PAYMENT_TBL (  ORIGINAL_FPS_REF_NO ASC  , IS_OUTWARD ASC  )   ;
 CREATE INDEX IDX_PAYMENT_STTL_DATE ON ECFPS_PAYMENT_TBL (  SETTLEMENT_DATE ASC  )   ;
 CREATE INDEX IDX_PAYMENT_TRANSACTION_ID ON ECFPS_PAYMENT_TBL (  TRANSACTION_ID ASC  )   ;
 CREATE INDEX IDX_PAYMENT_INSTRUCTION_ID ON ECFPS_PAYMENT_TBL (  INSTRUCTION_ID ASC  )   ;
 
 CREATE INDEX IDX_PAYMENT_TX_STS ON ECFPS_PAYMENT_TBL (  TRANSACTION_STATUS ASC  )   ;
 CREATE INDEX IDX_PAYMENT_BAL_STS ON ECFPS_PAYMENT_TBL (  BAL_STATUS ASC  )   ;
--  CREATE INDEX IF NOT EXISTS ECFPS_PAYMENT_TBL_LOWER_MANDATE_ID ON ECFPS_PAYMENT_TBL(lower(MANDATE_ID));

-- Create daily partitions starting from current date
SELECT partman.create_parent(
    p_parent_table => 'public.ecfps_payment_tbl',
    p_control => 'creation_datetime',
    p_type => 'range',
    p_interval => '1 day',  -- Use proper PostgreSQL interval syntax
    p_premake => 30,  -- Create 30 days of future partitions
    p_start_partition => date_trunc('day', CURRENT_DATE)::text
);

UPDATE partman.part_config 
SET 
    retention = '3 years',           -- Keep 3 years of data
    retention_keep_table = true,     -- Keep dropped partitions as regular tables for compliance
    infinite_time_partitions = false -- Don't allow infinite partitions
WHERE parent_table = 'public.ecfps_payment_tbl';

SELECT cron.schedule('partman-maintenance', '0 * * * *', $$CALL partman.run_maintenance()$$);
 
 
drop table if exists ECFPS_LEDGER_TX_TBL cascade;
CREATE TABLE ECFPS_LEDGER_TX_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	PAYMENT_ID bigint NOT NULL,
	CLR_CD char(11) NOT NULL,
	IS_CC boolean NOT NULL, -- Is credit card
	BRANCH varchar(3) NULL,
	ACCT_NO varchar(34) NOT NULL,
	CTRL_ACCT_NO varchar(34) NULL,
	TYP smallint NOT NULL,
	IS_CREDIT boolean NOT NULL,
	AMT decimal(17,2) NOT NULL,
	CCY char(3) NOT NULL,
	REF varchar(35) NULL,
	STATUS smallint NOT NULL,
	RTN_CODE varchar(10) NULL,
	RTN_MSG varchar(105) NULL,
	CUST varchar(35) NULL,
	CREATION_DATETIME timestamp(3) NOT NULL,
	CONSTRAINT PK_LEDGER_TX PRIMARY KEY (ID)
);
 CREATE INDEX IDX_LEDGER_TX_PMT_ID ON ECFPS_LEDGER_TX_TBL (  PAYMENT_ID ASC  )   ;


-- 06charge.sql

-- 07journal.sql
drop table if exists ECFPS_JOURNAL_TBL cascade;
CREATE TABLE ECFPS_JOURNAL_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	MODULE varchar(35) NOT NULL,
	BUSINESS_SERVICE varchar(35) NULL,
	MESSAGE_TYPE varchar(35) DEFAULT NULL NULL,
	CLIENT_SYS_ID varchar(35) NOT NULL,
	CLIENT_REQ_ID varchar(35) NOT NULL,
	EVENT_TYPE varchar(16) DEFAULT NULL NULL,
	EVENT_STATUS varchar(8) DEFAULT NULL NULL,
	EVENT_DETAIL text DEFAULT NULL NULL,
	EVENT_TIME timestamp(3) DEFAULT now() NOT NULL,
	CONSTRAINT PK_ECFPS_JOURNAL_TBL PRIMARY KEY (ID)
);
 CREATE INDEX ECFPS_JOURNAL_EVENT_TIME_IDX ON ECFPS_JOURNAL_TBL (  EVENT_TIME ASC  )   ;
 CREATE INDEX MESSAGE_TYPE_IDX ON ECFPS_JOURNAL_TBL (  MESSAGE_TYPE ASC  )   ;
 CREATE INDEX IDX_JOURNAL_CLIENT_REQ_ID_CLIENT_SYS_ID ON ECFPS_JOURNAL_TBL (  CLIENT_REQ_ID ASC  , CLIENT_SYS_ID ASC  )   ;
 

-- 08rtmg.sql
drop table if exists FPS_OW_RT_MSG_TBL cascade;
CREATE TABLE FPS_OW_RT_MSG_TBL (
       ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
       CLIENT_SYS_ID varchar(35) NOT NULL,
       CLIENT_REQ_ID varchar(35) NOT NULL,
       QUEUE_NAME varchar(40) NULL,
       MSG_ID varchar(40) NULL,
       BUSINESS_SERVICE varchar(6) NULL,
       REFERENCE varchar(35) NULL,
       PAYLOAD text NULL,
       STATUS varchar(10) NULL,
       UPDATE_SYS_ID varchar(35) NULL,
       CREATION_DATETIME timestamp(3) DEFAULT now() NOT NULL,
       UPDATE_DATETIME timestamp(3) DEFAULT now() NOT NULL,
       MSG_TYPE varchar(35) NULL,
       CONSTRAINT PK_FPS_OW_RT_MSG_TBL PRIMARY KEY (ID)
);

CREATE SEQUENCE unique_msg_id_seq
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    MAXVALUE 999999
    NO CYCLE; 

drop table if exists FPS_IW_RT_MSG_TBL cascade;
CREATE TABLE FPS_IW_RT_MSG_TBL (
	ID bigint GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) NOT NULL,
	CLIENT_SYS_ID varchar(35) NOT NULL,
	CLIENT_REQ_ID varchar(35) NOT NULL,
	QUEUE_NAME varchar(40) NULL,
	MSG_ID varchar(40) NULL,
	BUSINESS_SERVICE varchar(6) NULL,
	REFERENCE varchar(35) NULL,
	PAYLOAD text NULL,
	STATUS varchar(10) NULL,
	UPDATE_SYS_ID varchar(35) NULL,
	CREATION_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	UPDATE_DATETIME timestamp(3) DEFAULT now() NOT NULL,
	MSG_TYPE varchar(35) NULL,
	CONSTRAINT PK_FPS_IW_RT_MSG_TBL PRIMARY KEY (ID)
);

 CREATE INDEX IDX_OW_RT_CREATION_DATETIME ON FPS_OW_RT_MSG_TBL (CREATION_DATETIME ASC);

 CREATE INDEX IDX_IW_RT_REFERENCE ON FPS_IW_RT_MSG_TBL (  REFERENCE ASC  )   ;
 CREATE INDEX IDX_FPS_IW_RT_MSG_TBL_1 on FPS_IW_RT_MSG_TBL (MSG_ID ASC, BUSINESS_SERVICE ASC, REFERENCE ASC);
 CREATE UNIQUE INDEX IDX_IW_RT_MSG_TBL_UI1 ON FPS_IW_RT_MSG_TBL (MSG_ID);
 CREATE INDEX IDX_IW_RT_STATUS ON FPS_IW_RT_MSG_TBL (  STATUS ASC  )   ;
 CREATE INDEX IDX_IW_RT_CREATION_DATETIME ON FPS_IW_RT_MSG_TBL (CREATION_DATETIME);
 CREATE UNIQUE INDEX IDX_OW_RT_MSG_TBL_UI1 ON FPS_OW_RT_MSG_TBL (MSG_ID);


-- 09messagestatistics.sql
drop view if exists ECFPS_MESSAGE_STATISTICS_MV cascade;
CREATE VIEW ECFPS_MESSAGE_STATISTICS_MV
AS
SELECT BUSINESS_SERVICE, 'IR' INOUT, count(*) CNT
FROM   FPS_IW_RT_MSG_TBL
WHERE  CAST( creation_datetime as date) = CAST( CURRENT_TIMESTAMP as date)
GROUP BY BUSINESS_SERVICE
union
SELECT BUSINESS_SERVICE, 'OR' INOUT, count(*) CNT
FROM   FPS_OW_RT_MSG_TBL
WHERE  CAST( creation_datetime as date) = CAST( CURRENT_TIMESTAMP as date)
GROUP BY BUSINESS_SERVICE;

-- 10namematch.sql

-- 11init_system_flag.sql
insert into ECFPS_CFG_TBL (KE,VAL) VALUES ('PROP_REVISION',1);


